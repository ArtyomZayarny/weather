{"version":3,"sources":["redux/actionsTypes.js","apiClient.js","utils.js","redux/actions.js","components/Weather/WeatherCard.js","pages/City.js","components/Weather/WeatherContainer.js","pages/Home.js","pages/routes.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["SET_GEO_DATA","SET_WEATHER_DATA","SET_CITY","apiClient","axios","create","baseURL","kelvinToCelsius","kelvin","Math","round","normalizeData","data","result","temp","hasOwnProperty","feels","feels_like","min","temp_min","max","temp_max","pressure","humidity","city","setWeatherData","type","payload","setCity","Weathercard","weatherData","useSelector","state","Card","style","Object","keys","length","Content","header","description","Loader","active","City","props","useHistory","dispatch","useDispatch","Button","onClick","defaultProps","WeatherContainer","useState","setLoading","geoData","geo","useEffect","setGeo","lat","lon","a","getWeather","weather","get","process","response","name","assign","main","navigator","geolocation","watchPosition","position","coords","latitude","longitude","Home","history","Select","placeholder","options","key","value","text","onChange","e","then","push","App","routes","path","exact","to","useRoutes","Container","initState","reducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96af1869.chunk.js","sourcesContent":["export const SET_GEO_DATA = 'SET_GEO_DATA'\nexport const SET_WEATHER_DATA = 'SET_WEATHER_DATA'\nexport const SET_CITY = 'SET_CITY'\nexport const FETCH_WEATHER = 'FETCH_WEATHER'","import axios from 'axios'\n\nexport const apiClient = axios.create({\n    baseURL: 'https://api.openweathermap.org/data/2.5/'\n})","export const kelvinToCelsius = (kelvin) => {\n    return Math.round(kelvin - 273.15)\n}\nexport const normalizeData = (data) => {\n    let result = {}\n    result.temp = data.hasOwnProperty('temp') ? kelvinToCelsius(data.temp) : 0;\n    result.feels = data.hasOwnProperty('feels_like') ? kelvinToCelsius(data.feels_like) : 0;\n    result.min = data.hasOwnProperty('temp_min') ? kelvinToCelsius(data.temp_min) : 0;\n    result.max = data.hasOwnProperty('temp_max') ? kelvinToCelsius(data.temp_max) : 0;\n    result.pressure = data.hasOwnProperty('pressure') ? data.pressure : 0;\n    result.humidity = data.hasOwnProperty('humidity') ? data.humidity : 0;\n    result.city = data.hasOwnProperty('city') ? data.city : '';\n    return result;\n}","import { SET_GEO_DATA, SET_WEATHER_DATA, SET_CITY } from './actionsTypes'\nimport { apiClient } from '../apiClient'\nimport { normalizeData } from '../utils'\n\nexport const setGeoData = (data) => {\n    return {\n        type: SET_GEO_DATA,\n        payload: data\n    }\n}\nexport const setWeatherData = (data) => {\n    return {\n        type: SET_WEATHER_DATA,\n        payload: data\n    }\n}\n\nexport const setCity = city => {\n    return {\n        type: SET_CITY,\n        payload: city\n    }\n}\n\nexport const fetchWeather = (city) => {\n    return dispatch => {\n        dispatch(setCity(city));\n        apiClient.get(`weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}`)\n            .then(response => {\n                const { name: city } = response.data;\n                const result = Object.assign(response.data.main, { city });\n                const data = normalizeData(result)\n                dispatch(setWeatherData(data))\n            })\n    }\n}","import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types';\nimport { Card } from 'semantic-ui-react'\nimport { Loader } from 'semantic-ui-react'\nimport { useSelector } from 'react-redux'\n\nWeathercard.propTypes = {\n    temp: PropTypes.number.isRequired,\n    feels: PropTypes.number.isRequired,\n    min: PropTypes.number.isRequired,\n    max: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    city: PropTypes.string.isRequired\n}\n\nWeathercard.defaultProps = {\n    temp: 0,\n    feels: 0,\n    min: 0,\n    max: 0,\n    pressure: 0,\n    humidity: 0,\n    city: 'Odessa'\n}\n\nexport default function Weathercard({ city, temp, min, max, pressure, humidity }) {\n    const weatherData = useSelector(state => state.weatherData);\n\n    return (\n        <Card style={{ 'height': 290, 'position': 'relative' }}>\n            {Object.keys(weatherData).length > 0 ?\n                <>\n                    <Card.Content header={city} />\n                    <Card.Content description={`temp: ${temp} °C`} />\n                    <Card.Content description={`min: ${min} °C`} />\n                    <Card.Content description={`max: ${max} °C`} />\n                    <Card.Content description={`pressure: ${pressure} hPa`} />\n                    <Card.Content description={`humidity: ${humidity} %`} />\n                </>\n                :\n                <Loader active style={{ 'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center' }} />}\n        </Card>\n    )\n}\n","import React from 'react'\nimport { Button } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\nimport { setCity } from '../redux/actions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Weathercard from '../components/Weather/WeatherCard'\n\nexport default function City(props) {\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const weatherData = useSelector(state => state.weatherData);\n\n    const handleBack = () => {\n        dispatch(setCity(''))\n    }\n\n    return (\n        <>\n            <Button onClick={handleBack}>Click Here</Button>\n            <Weathercard {...weatherData} />\n        </>\n    )\n}\n","import { useState, useEffect, useCallback } from 'react'\nimport WeatherCard from './WeatherCard'\nimport { setGeoData, setWeatherData } from '../../redux/actions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { apiClient } from '../../apiClient'\nimport { normalizeData } from '../../utils'\n\nexport function WeatherContainer(props) {\n    const [isLoading, setLoading] = useState(false)\n    const dispatch = useDispatch();\n\n    const geoData = useSelector(state => state.geo);\n    const weatherData = useSelector(state => state.weatherData);\n\n    const apiKey = process.env.REACT_APP_API_KEY;\n\n    useEffect(() => {\n\n        //Request geo data\n        if (Object.keys(geoData).length === 0) {\n            setGeo()\n        }\n\n        //Geo data was recived\n        if (Object.keys(geoData).length > 0) {\n            const { lat, lon } = geoData;\n            (async () => {\n                const data = await getWeather(lat, lon)\n                const weather = normalizeData(data)\n                dispatch(setWeatherData(weather))\n            })()\n\n            setLoading(false)\n        }\n\n    }, [geoData])\n\n    const getWeather = async (lat, lon) => {\n        let response = await apiClient.get(`weather?lat=${lat}&lon=${lon}&appid=${apiKey}`)\n        let data = await response.data;\n        const { name: city } = data;\n        const result = Object.assign(data.main, { city })\n        return result\n    }\n\n    const setGeo = () => {\n        setLoading(true)\n        navigator.geolocation.watchPosition(async (position) => {\n            const geo = {\n                lat: position.coords.latitude,\n                lon: position.coords.longitude,\n            }\n            dispatch(setGeoData(geo))\n        })\n    }\n\n    return (\n        <>\n            <WeatherCard {...weatherData} />\n        </>\n    )\n}\n","import React from 'react'\nimport { WeatherContainer } from '../components/Weather/WeatherContainer'\nimport { useHistory } from 'react-router-dom'\nimport { Select } from 'semantic-ui-react'\nimport { useDispatch } from 'react-redux'\nimport { fetchWeather } from '../redux/actions'\n\n\nexport default function Home(props) {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n\n    const countryOptions = [\n        { key: '1', value: 'Kabul', text: 'Kabul' },\n        { key: '2', value: 'Madrid', text: 'Madrid' },\n        { key: '3', value: 'Tbilisi', text: 'Tbilisi' },\n        { key: '4', value: 'Athens', text: 'Athens' },\n        { key: '5', value: 'Jakarta', text: 'Jakarta' },\n        { key: '6', value: 'Jerusalem', text: 'Jerusalem' },\n        { key: '7', value: 'Rome', text: 'Rome' },\n        { key: '8', value: 'Tokyo', text: 'Tokyo' },\n        { key: '9', value: 'Kyiv', text: 'Kyiv' },\n        { key: '10', value: 'Washington', text: 'Washington' },\n    ];\n    const handleChange = (e, { value }) => {\n\n        dispatch(fetchWeather(value))\n        history.push(`/${value}`)\n\n    }\n    return (\n        <>\n            <WeatherContainer />\n            <Select\n                style={{ 'width': 290 }}\n                placeholder='Select your city'\n                options={countryOptions}\n                onChange={handleChange}\n            />\n        </>\n    )\n}\n","import { Switch, Route, Redirect } from 'react-router-dom'\nimport City from './City'\nimport Home from './Home'\n\nexport const useRoutes = city => {\n    if (city) {\n        return (\n            <Switch>\n                <Route path={`/:${city}`} exact>\n                    <City />\n                </Route>\n                <Redirect to=\"/\" />\n            </Switch>\n        )\n    } else {\n        return (\n            <Switch>\n                <Route path=\"/\" exact>\n                    <Home />\n                </Route>\n                <Redirect to=\"/\" />\n            </Switch>\n        )\n    }\n}","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport { useRoutes } from './pages/routes'\nimport { Container } from 'semantic-ui-react'\n\n\n\n\nexport default function App() {\n\n  const city = useSelector(state => state.city)\n  const routes = useRoutes(city)\n\n  return (\n    <Container style={{ 'marginTop': 20 }}>\n      <Router>\n        {routes}\n      </Router>\n    </Container>\n  );\n}\n\n","import { SET_CITY, SET_GEO_DATA, SET_WEATHER_DATA } from \"./actionsTypes\";\n\nconst initState = {\n    geo: {},\n    city: '',\n    weatherData: {}\n}\n\nconst reducer = (state = initState, action) => {\n    switch (action.type) {\n        case SET_GEO_DATA:\n            return { ...state, geo: { ...action.payload } }\n        case SET_WEATHER_DATA:\n            return { ...state, weatherData: { ...action.payload } }\n        case SET_CITY:\n            return { ...state, city: action.payload }\n    }\n\n    return state\n}\n\nexport default reducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from './reducer'\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}