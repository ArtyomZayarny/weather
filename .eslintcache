[{"/Users/Timaz/Desktop/weather/src/index.js":"1","/Users/Timaz/Desktop/weather/src/App.js":"2","/Users/Timaz/Desktop/weather/src/redux/store.js":"3","/Users/Timaz/Desktop/weather/src/redux/reducer.js":"4","/Users/Timaz/Desktop/weather/src/redux/actionsTypes.js":"5","/Users/Timaz/Desktop/weather/src/redux/actions.js":"6","/Users/Timaz/Desktop/weather/src/apiClient.js":"7","/Users/Timaz/Desktop/weather/src/components/Weather/WeatherCard.js":"8","/Users/Timaz/Desktop/weather/src/components/Weather/WeatherContainer.js":"9","/Users/Timaz/Desktop/weather/src/utils.js":"10","/Users/Timaz/Desktop/weather/src/pages/Home.js":"11","/Users/Timaz/Desktop/weather/src/pages/City.js":"12","/Users/Timaz/Desktop/weather/src/pages/routes.js":"13"},{"size":336,"mtime":1607107500399,"results":"14","hashOfConfig":"15"},{"size":478,"mtime":1607115568609,"results":"16","hashOfConfig":"15"},{"size":286,"mtime":1607108838577,"results":"17","hashOfConfig":"15"},{"size":535,"mtime":1607110151680,"results":"18","hashOfConfig":"15"},{"size":173,"mtime":1607110014391,"results":"19","hashOfConfig":"15"},{"size":947,"mtime":1607115087347,"results":"20","hashOfConfig":"15"},{"size":124,"mtime":1607016236502,"results":"21","hashOfConfig":"15"},{"size":1541,"mtime":1607116371974,"results":"22","hashOfConfig":"15"},{"size":1820,"mtime":1607116394430,"results":"23","hashOfConfig":"15"},{"size":728,"mtime":1607111553755,"results":"24","hashOfConfig":"15"},{"size":1390,"mtime":1607115331289,"results":"25","hashOfConfig":"15"},{"size":664,"mtime":1607115056247,"results":"26","hashOfConfig":"15"},{"size":591,"mtime":1607058979764,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1k9kbxk",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/Timaz/Desktop/weather/src/index.js",[],["60","61"],"/Users/Timaz/Desktop/weather/src/App.js",["62"],"import React, { useEffect } from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport { useRoutes } from './pages/routes'\nimport { Container } from 'semantic-ui-react'\n\n\n\n\nexport default function App() {\n\n  const city = useSelector(state => state.city)\n  const routes = useRoutes(city)\n\n  return (\n    <Container style={{ 'marginTop': 20 }}>\n      <Router>\n        {routes}\n      </Router>\n    </Container>\n  );\n}\n\n","/Users/Timaz/Desktop/weather/src/redux/store.js",[],"/Users/Timaz/Desktop/weather/src/redux/reducer.js",["63"],"import { SET_CITY, SET_GEO_DATA, SET_WEATHER_DATA } from \"./actionsTypes\";\n\nconst initState = {\n    geo: {},\n    city: '',\n    weatherData: {}\n}\n\nconst reducer = (state = initState, action) => {\n    switch (action.type) {\n        case SET_GEO_DATA:\n            return { ...state, geo: { ...action.payload } }\n        case SET_WEATHER_DATA:\n            return { ...state, weatherData: { ...action.payload } }\n        case SET_CITY:\n            return { ...state, city: action.payload }\n    }\n\n    return state\n}\n\nexport default reducer;","/Users/Timaz/Desktop/weather/src/redux/actionsTypes.js",[],"/Users/Timaz/Desktop/weather/src/redux/actions.js",[],"/Users/Timaz/Desktop/weather/src/apiClient.js",[],"/Users/Timaz/Desktop/weather/src/components/Weather/WeatherCard.js",["64"],"import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types';\nimport { Card } from 'semantic-ui-react'\nimport { Loader } from 'semantic-ui-react'\nimport { useSelector } from 'react-redux'\n\nWeathercard.propTypes = {\n    temp: PropTypes.number.isRequired,\n    feels: PropTypes.number.isRequired,\n    min: PropTypes.number.isRequired,\n    max: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    city: PropTypes.string.isRequired\n}\n\nWeathercard.defaultProps = {\n    temp: 0,\n    feels: 0,\n    min: 0,\n    max: 0,\n    pressure: 0,\n    humidity: 0,\n    city: 'Odessa'\n}\n\nexport default function Weathercard({ city, temp, min, max, pressure, humidity }) {\n    const weatherData = useSelector(state => state.weatherData);\n\n    return (\n        <Card style={{ 'height': 290, 'position': 'relative' }}>\n            {Object.keys(weatherData).length > 0 ?\n                <>\n                    <Card.Content header={city} />\n                    <Card.Content description={`temp: ${temp} °C`} />\n                    <Card.Content description={`min: ${min} °C`} />\n                    <Card.Content description={`max: ${max} °C`} />\n                    <Card.Content description={`pressure: ${pressure} hPa`} />\n                    <Card.Content description={`humidity: ${humidity} %`} />\n                </>\n                :\n                <Loader active style={{ 'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center' }} />}\n        </Card>\n    )\n}\n","/Users/Timaz/Desktop/weather/src/components/Weather/WeatherContainer.js",["65","66","67"],"import { useState, useEffect, useCallback } from 'react'\nimport WeatherCard from './WeatherCard'\nimport { setGeoData, setWeatherData } from '../../redux/actions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { apiClient } from '../../apiClient'\nimport { normalizeData } from '../../utils'\n\nexport function WeatherContainer(props) {\n    const [isLoading, setLoading] = useState(false)\n    const dispatch = useDispatch();\n\n    const geoData = useSelector(state => state.geo);\n    const weatherData = useSelector(state => state.weatherData);\n\n    const apiKey = process.env.REACT_APP_API_KEY;\n\n    useEffect(() => {\n\n        //Request geo data\n        if (Object.keys(geoData).length === 0) {\n            setGeo()\n        }\n\n        //Geo data was recived\n        if (Object.keys(geoData).length > 0) {\n            const { lat, lon } = geoData;\n            (async () => {\n                const data = await getWeather(lat, lon)\n                const weather = normalizeData(data)\n                dispatch(setWeatherData(weather))\n            })()\n\n            setLoading(false)\n        }\n\n    }, [geoData])\n\n    const getWeather = async (lat, lon) => {\n        let response = await apiClient.get(`weather?lat=${lat}&lon=${lon}&appid=${apiKey}`)\n        let data = await response.data;\n        const { name: city } = data;\n        const result = Object.assign(data.main, { city })\n        return result\n    }\n\n    const setGeo = () => {\n        setLoading(true)\n        navigator.geolocation.watchPosition(async (position) => {\n            const geo = {\n                lat: position.coords.latitude,\n                lon: position.coords.longitude,\n            }\n            dispatch(setGeoData(geo))\n        })\n    }\n\n    return (\n        <>\n            <WeatherCard {...weatherData} />\n        </>\n    )\n}\n","/Users/Timaz/Desktop/weather/src/utils.js",[],"/Users/Timaz/Desktop/weather/src/pages/Home.js",[],"/Users/Timaz/Desktop/weather/src/pages/City.js",["68"],"import React from 'react'\nimport { Button } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\nimport { setCity } from '../redux/actions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Weathercard from '../components/Weather/WeatherCard'\n\nexport default function City(props) {\n    const history = useHistory()\n    const dispatch = useDispatch()\n    const weatherData = useSelector(state => state.weatherData);\n\n    const handleBack = () => {\n        dispatch(setCity(''))\n    }\n\n    return (\n        <>\n            <Button onClick={handleBack}>Click Here</Button>\n            <Weathercard {...weatherData} />\n        </>\n    )\n}\n","/Users/Timaz/Desktop/weather/src/pages/routes.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":26},{"ruleId":"77","severity":1,"message":"78","line":10,"column":5,"nodeType":"79","messageId":"80","endLine":17,"endColumn":6},{"ruleId":"73","severity":1,"message":"74","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":26},{"ruleId":"73","severity":1,"message":"81","line":1,"column":31,"nodeType":"75","messageId":"76","endLine":1,"endColumn":42},{"ruleId":"73","severity":1,"message":"82","line":9,"column":12,"nodeType":"75","messageId":"76","endLine":9,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":36,"column":8,"nodeType":"85","endLine":36,"endColumn":17,"suggestions":"86"},{"ruleId":"73","severity":1,"message":"87","line":9,"column":11,"nodeType":"75","messageId":"76","endLine":9,"endColumn":18},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useCallback' is defined but never used.","'isLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'getWeather', and 'setGeo'. Either include them or remove the dependency array.","ArrayExpression",["90"],"'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [dispatch, geoData, getWeather, setGeo]",{"range":"93","text":"94"},[1109,1118],"[dispatch, geoData, getWeather, setGeo]"]